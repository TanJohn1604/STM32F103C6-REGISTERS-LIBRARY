
STM32F103C6 REGISTERS LIBRARY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004ac  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005dc  080005e4  000105e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005dc  080005dc  000105e4  2**0
                  CONTENTS
  4 .ARM          00000000  080005dc  080005dc  000105e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005dc  080005e4  000105e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005dc  080005dc  000105dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005e0  080005e0  000105e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080005e4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080005e4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000105e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d3d  00000000  00000000  0001060d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000585  00000000  00000000  0001134a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000108  00000000  00000000  000118d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b0  00000000  00000000  000119d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001001b  00000000  00000000  00011a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000016fc  00000000  00000000  00021aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053852  00000000  00000000  0002319f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000769f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000248  00000000  00000000  00076a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080005c4 	.word	0x080005c4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080005c4 	.word	0x080005c4

08000170 <init_GP>:
 *      Author: ad
 */
#include "gpio.h"

void init_GP(unsigned short port, unsigned short pin, unsigned short dir, unsigned short opt)
{
 8000170:	b490      	push	{r4, r7}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	4604      	mov	r4, r0
 8000178:	4608      	mov	r0, r1
 800017a:	4611      	mov	r1, r2
 800017c:	461a      	mov	r2, r3
 800017e:	4623      	mov	r3, r4
 8000180:	80fb      	strh	r3, [r7, #6]
 8000182:	4603      	mov	r3, r0
 8000184:	80bb      	strh	r3, [r7, #4]
 8000186:	460b      	mov	r3, r1
 8000188:	807b      	strh	r3, [r7, #2]
 800018a:	4613      	mov	r3, r2
 800018c:	803b      	strh	r3, [r7, #0]
	//examble  =  init_GP(PA,0,OUT50,O_GP_PP);
 volatile unsigned long * CR;
 unsigned short tPIN = pin;
 800018e:	88bb      	ldrh	r3, [r7, #4]
 8000190:	817b      	strh	r3, [r7, #10]
 unsigned short offset = 0x00;
 8000192:	2300      	movs	r3, #0
 8000194:	813b      	strh	r3, [r7, #8]

	if(pin > 7)
 8000196:	88bb      	ldrh	r3, [r7, #4]
 8000198:	2b07      	cmp	r3, #7
 800019a:	d904      	bls.n	80001a6 <init_GP+0x36>
		{
			tPIN -= 8;
 800019c:	897b      	ldrh	r3, [r7, #10]
 800019e:	3b08      	subs	r3, #8
 80001a0:	817b      	strh	r3, [r7, #10]
			offset = 0x01;
 80001a2:	2301      	movs	r3, #1
 80001a4:	813b      	strh	r3, [r7, #8]
		}

	if(port == 1)
 80001a6:	88fb      	ldrh	r3, [r7, #6]
 80001a8:	2b01      	cmp	r3, #1
 80001aa:	d10d      	bne.n	80001c8 <init_GP+0x58>
		{
			RCC_APB2ENR |= 4; // Bật clock cho port A
 80001ac:	4b27      	ldr	r3, [pc, #156]	; (800024c <init_GP+0xdc>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a26      	ldr	r2, [pc, #152]	; (800024c <init_GP+0xdc>)
 80001b2:	f043 0304 	orr.w	r3, r3, #4
 80001b6:	6013      	str	r3, [r2, #0]
			CR = (volatile unsigned long *) (&GPIO_A + offset);
 80001b8:	893b      	ldrh	r3, [r7, #8]
 80001ba:	009b      	lsls	r3, r3, #2
 80001bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80001c0:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80001c4:	60fb      	str	r3, [r7, #12]
 80001c6:	e020      	b.n	800020a <init_GP+0x9a>
		}
	else if(port == 2)
 80001c8:	88fb      	ldrh	r3, [r7, #6]
 80001ca:	2b02      	cmp	r3, #2
 80001cc:	d10d      	bne.n	80001ea <init_GP+0x7a>
		{
			RCC_APB2ENR |= 8; // Bật clock cho port B
 80001ce:	4b1f      	ldr	r3, [pc, #124]	; (800024c <init_GP+0xdc>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a1e      	ldr	r2, [pc, #120]	; (800024c <init_GP+0xdc>)
 80001d4:	f043 0308 	orr.w	r3, r3, #8
 80001d8:	6013      	str	r3, [r2, #0]
			CR = (volatile unsigned long *) (&GPIO_B + offset);
 80001da:	893b      	ldrh	r3, [r7, #8]
 80001dc:	009b      	lsls	r3, r3, #2
 80001de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80001e2:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80001e6:	60fb      	str	r3, [r7, #12]
 80001e8:	e00f      	b.n	800020a <init_GP+0x9a>
		}
	else if(port == 3)
 80001ea:	88fb      	ldrh	r3, [r7, #6]
 80001ec:	2b03      	cmp	r3, #3
 80001ee:	d10c      	bne.n	800020a <init_GP+0x9a>
		{
			RCC_APB2ENR |= 0x10; // Bật clock cho port C
 80001f0:	4b16      	ldr	r3, [pc, #88]	; (800024c <init_GP+0xdc>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a15      	ldr	r2, [pc, #84]	; (800024c <init_GP+0xdc>)
 80001f6:	f043 0310 	orr.w	r3, r3, #16
 80001fa:	6013      	str	r3, [r2, #0]
			CR = (volatile unsigned long *) (&GPIO_C + offset);
 80001fc:	893b      	ldrh	r3, [r7, #8]
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000204:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8000208:	60fb      	str	r3, [r7, #12]
		}

		*CR &= ~(0xf<<(tPIN)*4); //Reset cấu hình của pin
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	897a      	ldrh	r2, [r7, #10]
 8000210:	0092      	lsls	r2, r2, #2
 8000212:	210f      	movs	r1, #15
 8000214:	fa01 f202 	lsl.w	r2, r1, r2
 8000218:	43d2      	mvns	r2, r2
 800021a:	401a      	ands	r2, r3
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	601a      	str	r2, [r3, #0]
		*CR |= ((dir <<(tPIN*4)) | (opt<<(tPIN*4+2))); //cấu hình pin
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	8879      	ldrh	r1, [r7, #2]
 8000226:	897a      	ldrh	r2, [r7, #10]
 8000228:	0092      	lsls	r2, r2, #2
 800022a:	4091      	lsls	r1, r2
 800022c:	8838      	ldrh	r0, [r7, #0]
 800022e:	897a      	ldrh	r2, [r7, #10]
 8000230:	0092      	lsls	r2, r2, #2
 8000232:	3202      	adds	r2, #2
 8000234:	fa00 f202 	lsl.w	r2, r0, r2
 8000238:	430a      	orrs	r2, r1
 800023a:	431a      	orrs	r2, r3
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	601a      	str	r2, [r3, #0]
}
 8000240:	bf00      	nop
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bc90      	pop	{r4, r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40021018 	.word	0x40021018

08000250 <R_GP>:

int R_GP(unsigned short port, unsigned short pin)
{
 8000250:	b480      	push	{r7}
 8000252:	b087      	sub	sp, #28
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	460a      	mov	r2, r1
 800025a:	80fb      	strh	r3, [r7, #6]
 800025c:	4613      	mov	r3, r2
 800025e:	80bb      	strh	r3, [r7, #4]
	volatile unsigned long * IDR;
	unsigned long offset = 0x02;
 8000260:	2302      	movs	r3, #2
 8000262:	613b      	str	r3, [r7, #16]
	int state;

	if(port == 1)
 8000264:	88fb      	ldrh	r3, [r7, #6]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d107      	bne.n	800027a <R_GP+0x2a>
		{
			IDR = (volatile unsigned long *) (&GPIO_A + offset);
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	009b      	lsls	r3, r3, #2
 800026e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000272:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8000276:	617b      	str	r3, [r7, #20]
 8000278:	e014      	b.n	80002a4 <R_GP+0x54>
		}
	else if(port == 2)
 800027a:	88fb      	ldrh	r3, [r7, #6]
 800027c:	2b02      	cmp	r3, #2
 800027e:	d107      	bne.n	8000290 <R_GP+0x40>
		{
			IDR = (volatile unsigned long *) (&GPIO_B + offset);
 8000280:	693b      	ldr	r3, [r7, #16]
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000288:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 800028c:	617b      	str	r3, [r7, #20]
 800028e:	e009      	b.n	80002a4 <R_GP+0x54>
		}
	else if(port == 3)
 8000290:	88fb      	ldrh	r3, [r7, #6]
 8000292:	2b03      	cmp	r3, #3
 8000294:	d106      	bne.n	80002a4 <R_GP+0x54>
	{
		IDR = (volatile unsigned long *) (&GPIO_C + offset);
 8000296:	693b      	ldr	r3, [r7, #16]
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800029e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80002a2:	617b      	str	r3, [r7, #20]
	}
	state = ((*IDR & (1<<pin))>>pin);
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	88ba      	ldrh	r2, [r7, #4]
 80002aa:	2101      	movs	r1, #1
 80002ac:	fa01 f202 	lsl.w	r2, r1, r2
 80002b0:	401a      	ands	r2, r3
 80002b2:	88bb      	ldrh	r3, [r7, #4]
 80002b4:	fa22 f303 	lsr.w	r3, r2, r3
 80002b8:	60fb      	str	r3, [r7, #12]
	return state;
 80002ba:	68fb      	ldr	r3, [r7, #12]
}
 80002bc:	4618      	mov	r0, r3
 80002be:	371c      	adds	r7, #28
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr

080002c6 <W_GP>:

void W_GP(unsigned short port, unsigned short pin, unsigned short state)
{
 80002c6:	b480      	push	{r7}
 80002c8:	b085      	sub	sp, #20
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	4603      	mov	r3, r0
 80002ce:	80fb      	strh	r3, [r7, #6]
 80002d0:	460b      	mov	r3, r1
 80002d2:	80bb      	strh	r3, [r7, #4]
 80002d4:	4613      	mov	r3, r2
 80002d6:	807b      	strh	r3, [r7, #2]
		volatile unsigned long * ODR;
		unsigned long offset = 0x03;
 80002d8:	2303      	movs	r3, #3
 80002da:	60bb      	str	r3, [r7, #8]


	if(port == 1)
 80002dc:	88fb      	ldrh	r3, [r7, #6]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d107      	bne.n	80002f2 <W_GP+0x2c>
		{
			ODR = (volatile unsigned long *) (&GPIO_A + offset);
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80002ea:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80002ee:	60fb      	str	r3, [r7, #12]
 80002f0:	e014      	b.n	800031c <W_GP+0x56>
		}
	else if(port == 2)
 80002f2:	88fb      	ldrh	r3, [r7, #6]
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	d107      	bne.n	8000308 <W_GP+0x42>
		{
			ODR = (volatile unsigned long *) (&GPIO_B + offset);
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	009b      	lsls	r3, r3, #2
 80002fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000300:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8000304:	60fb      	str	r3, [r7, #12]
 8000306:	e009      	b.n	800031c <W_GP+0x56>
		}
	else if(port == 3)
 8000308:	88fb      	ldrh	r3, [r7, #6]
 800030a:	2b03      	cmp	r3, #3
 800030c:	d106      	bne.n	800031c <W_GP+0x56>
	{
		ODR = (volatile unsigned long *) (&GPIO_C + offset);
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000316:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 800031a:	60fb      	str	r3, [r7, #12]
	}
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
 800031c:	887b      	ldrh	r3, [r7, #2]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d009      	beq.n	8000336 <W_GP+0x70>
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	8879      	ldrh	r1, [r7, #2]
 8000328:	88ba      	ldrh	r2, [r7, #4]
 800032a:	fa01 f202 	lsl.w	r2, r1, r2
 800032e:	431a      	orrs	r2, r3
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	601a      	str	r2, [r3, #0]
}
 8000334:	e009      	b.n	800034a <W_GP+0x84>
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	88ba      	ldrh	r2, [r7, #4]
 800033c:	2101      	movs	r1, #1
 800033e:	fa01 f202 	lsl.w	r2, r1, r2
 8000342:	43d2      	mvns	r2, r2
 8000344:	401a      	ands	r2, r3
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	601a      	str	r2, [r3, #0]
}
 800034a:	bf00      	nop
 800034c:	3714      	adds	r7, #20
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr

08000354 <toggle_GP>:

void toggle_GP(unsigned short port, unsigned short pin)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	4603      	mov	r3, r0
 800035c:	460a      	mov	r2, r1
 800035e:	80fb      	strh	r3, [r7, #6]
 8000360:	4613      	mov	r3, r2
 8000362:	80bb      	strh	r3, [r7, #4]
	if (R_GP(port,pin))
 8000364:	88ba      	ldrh	r2, [r7, #4]
 8000366:	88fb      	ldrh	r3, [r7, #6]
 8000368:	4611      	mov	r1, r2
 800036a:	4618      	mov	r0, r3
 800036c:	f7ff ff70 	bl	8000250 <R_GP>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d006      	beq.n	8000384 <toggle_GP+0x30>
		{
			W_GP(port,pin,0);
 8000376:	88b9      	ldrh	r1, [r7, #4]
 8000378:	88fb      	ldrh	r3, [r7, #6]
 800037a:	2200      	movs	r2, #0
 800037c:	4618      	mov	r0, r3
 800037e:	f7ff ffa2 	bl	80002c6 <W_GP>
		}
	else
		{
			W_GP(port,pin,1);
		}
}
 8000382:	e005      	b.n	8000390 <toggle_GP+0x3c>
			W_GP(port,pin,1);
 8000384:	88b9      	ldrh	r1, [r7, #4]
 8000386:	88fb      	ldrh	r3, [r7, #6]
 8000388:	2201      	movs	r2, #1
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff ff9b 	bl	80002c6 <W_GP>
}
 8000390:	bf00      	nop
 8000392:	3708      	adds	r7, #8
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}

08000398 <EXTI0_IRQHandler>:
		EXTI->RTSR|=1;
		__disable_irq();
		NVIC_EnableIRQ(EXTI0_IRQn);
		__enable_irq();
}
void EXTI0_IRQHandler(){
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	//xóa bit nhớ sự kiện ngắt
	EXTI->PR |=1;
 800039c:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <EXTI0_IRQHandler+0x1c>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	4a04      	ldr	r2, [pc, #16]	; (80003b4 <EXTI0_IRQHandler+0x1c>)
 80003a2:	f043 0301 	orr.w	r3, r3, #1
 80003a6:	6153      	str	r3, [r2, #20]
	delay_ms(50);
 80003a8:	2032      	movs	r0, #50	; 0x32
 80003aa:	f000 f863 	bl	8000474 <delay_ms>
//			}else{
//				interrupt_PA0=1;
//			}


}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	40010400 	.word	0x40010400

080003b8 <config>:
 */


#include "system_clock.h"

void config(void){
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
	//bật clock ngoại 8Mhz
	RCC->CR |= RCC_CR_HSEON;
 80003bc:	4b20      	ldr	r3, [pc, #128]	; (8000440 <config+0x88>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a1f      	ldr	r2, [pc, #124]	; (8000440 <config+0x88>)
 80003c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003c6:	6013      	str	r3, [r2, #0]
	//đợi cho clock ngoại bật xong
	while(!(RCC->CR & RCC_CR_HSERDY) );
 80003c8:	bf00      	nop
 80003ca:	4b1d      	ldr	r3, [pc, #116]	; (8000440 <config+0x88>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d0f9      	beq.n	80003ca <config+0x12>
	//chọn clock chính là clock ngoại hse
	RCC->CFGR |= RCC_CFGR_SW_HSE;
 80003d6:	4b1a      	ldr	r3, [pc, #104]	; (8000440 <config+0x88>)
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	4a19      	ldr	r2, [pc, #100]	; (8000440 <config+0x88>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6053      	str	r3, [r2, #4]
	//đợi chọn clock chính là clock ngoại hse xong
	while(!(RCC->CFGR & RCC_CFGR_SWS_HSE));
 80003e2:	bf00      	nop
 80003e4:	4b16      	ldr	r3, [pc, #88]	; (8000440 <config+0x88>)
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	f003 0304 	and.w	r3, r3, #4
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d0f9      	beq.n	80003e4 <config+0x2c>
	//cấu hình các bộ chia clock
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 80003f0:	4b13      	ldr	r3, [pc, #76]	; (8000440 <config+0x88>)
 80003f2:	4a13      	ldr	r2, [pc, #76]	; (8000440 <config+0x88>)
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	6053      	str	r3, [r2, #4]
	RCC->CFGR|= RCC_CFGR_PPRE2_DIV1;
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <config+0x88>)
 80003fa:	4a11      	ldr	r2, [pc, #68]	; (8000440 <config+0x88>)
 80003fc:	685b      	ldr	r3, [r3, #4]
 80003fe:	6053      	str	r3, [r2, #4]
	//bật clock cho,Timer1 clock về apb2 là 8Mhz
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000400:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <config+0x88>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a0e      	ldr	r2, [pc, #56]	; (8000440 <config+0x88>)
 8000406:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800040a:	6193      	str	r3, [r2, #24]
	//cấu hình max thanh ghi đếm của timer
	TIM1->ARR =0xffff-1;
 800040c:	4b0d      	ldr	r3, [pc, #52]	; (8000444 <config+0x8c>)
 800040e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
	//bộ chia của timer1 là 8: clock của timer1 là 8Mhz/8=1Mhz
	TIM1->PSC =8-1;
 8000414:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <config+0x8c>)
 8000416:	2207      	movs	r2, #7
 8000418:	629a      	str	r2, [r3, #40]	; 0x28
	//Bật timer1
	TIM1->CR1 |=TIM_CR1_CEN;
 800041a:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <config+0x8c>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a09      	ldr	r2, [pc, #36]	; (8000444 <config+0x8c>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	6013      	str	r3, [r2, #0]
	//Đợi timer1 bật xong
	while(! (TIM1->SR & TIM_SR_UIF ));
 8000426:	bf00      	nop
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <config+0x8c>)
 800042a:	691b      	ldr	r3, [r3, #16]
 800042c:	f003 0301 	and.w	r3, r3, #1
 8000430:	2b00      	cmp	r3, #0
 8000432:	d0f9      	beq.n	8000428 <config+0x70>



}
 8000434:	bf00      	nop
 8000436:	bf00      	nop
 8000438:	46bd      	mov	sp, r7
 800043a:	bc80      	pop	{r7}
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000
 8000444:	40012c00 	.word	0x40012c00

08000448 <delay_us>:
void delay_us(uint16_t us ){
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	80fb      	strh	r3, [r7, #6]
	TIM1->CNT=0;
 8000452:	4b07      	ldr	r3, [pc, #28]	; (8000470 <delay_us+0x28>)
 8000454:	2200      	movs	r2, #0
 8000456:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM1->CNT <us);
 8000458:	bf00      	nop
 800045a:	4b05      	ldr	r3, [pc, #20]	; (8000470 <delay_us+0x28>)
 800045c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800045e:	88fb      	ldrh	r3, [r7, #6]
 8000460:	429a      	cmp	r2, r3
 8000462:	d3fa      	bcc.n	800045a <delay_us+0x12>

}
 8000464:	bf00      	nop
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	40012c00 	.word	0x40012c00

08000474 <delay_ms>:
void delay_ms(uint16_t ms){
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	80fb      	strh	r3, [r7, #6]

	for (uint16_t i=0; i<ms ;i++){
 800047e:	2300      	movs	r3, #0
 8000480:	81fb      	strh	r3, [r7, #14]
 8000482:	e006      	b.n	8000492 <delay_ms+0x1e>
		delay_us(1000);
 8000484:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000488:	f7ff ffde 	bl	8000448 <delay_us>
	for (uint16_t i=0; i<ms ;i++){
 800048c:	89fb      	ldrh	r3, [r7, #14]
 800048e:	3301      	adds	r3, #1
 8000490:	81fb      	strh	r3, [r7, #14]
 8000492:	89fa      	ldrh	r2, [r7, #14]
 8000494:	88fb      	ldrh	r3, [r7, #6]
 8000496:	429a      	cmp	r2, r3
 8000498:	d3f4      	bcc.n	8000484 <delay_ms+0x10>
	}
}
 800049a:	bf00      	nop
 800049c:	bf00      	nop
 800049e:	3710      	adds	r7, #16
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <init_systick_interrupt>:
 *      Author: ad
 */
#include "systick_interrupt.h"
#include "gpio.h"

void init_systick_interrupt(uint32_t time_ms){
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	//CLOCK AHB BẮT BUỘC PHẢI LÀ 8MHZ
	//reset thanh ghi
	SysTick->CTRL = 0;
 80004ac:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <init_systick_interrupt+0x50>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
	//cai dat gia tri đích cho bộ đếm có 3byte tối đa
	SysTick->LOAD= time_ms*8000;
 80004b2:	4a10      	ldr	r2, [pc, #64]	; (80004f4 <init_systick_interrupt+0x50>)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80004ba:	fb01 f303 	mul.w	r3, r1, r3
 80004be:	6053      	str	r3, [r2, #4]
	//cài đặt giá trị cho thanh ghi đếm
	SysTick->VAL=0;
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <init_systick_interrupt+0x50>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
	//lấy clock từ AHB
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <init_systick_interrupt+0x50>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a0a      	ldr	r2, [pc, #40]	; (80004f4 <init_systick_interrupt+0x50>)
 80004cc:	f043 0304 	orr.w	r3, r3, #4
 80004d0:	6013      	str	r3, [r2, #0]
	//BẬT NGẮT SYSTICK
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <init_systick_interrupt+0x50>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <init_systick_interrupt+0x50>)
 80004d8:	f043 0302 	orr.w	r3, r3, #2
 80004dc:	6013      	str	r3, [r2, #0]
	//BẬT THANH GHI
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <init_systick_interrupt+0x50>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <init_systick_interrupt+0x50>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6013      	str	r3, [r2, #0]

}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	e000e010 	.word	0xe000e010

080004f8 <SysTick_Handler>:

void SysTick_Handler(){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	toggle_GP(PC, 13);
 80004fc:	210d      	movs	r1, #13
 80004fe:	2003      	movs	r0, #3
 8000500:	f7ff ff28 	bl	8000354 <toggle_GP>
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}

08000508 <main>:
//#include"interrupt_PA0.h"
//#include "systick_delay.h"
#include "systick_interrupt.h"
//int interrupt_PA0 =0;
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
    config();
 800050c:	f7ff ff54 	bl	80003b8 <config>
	init_GP(PC,13,OUT50,O_GP_PP);
 8000510:	2300      	movs	r3, #0
 8000512:	2203      	movs	r2, #3
 8000514:	210d      	movs	r1, #13
 8000516:	2003      	movs	r0, #3
 8000518:	f7ff fe2a 	bl	8000170 <init_GP>
//	init_GP(PA,0,IN,I_PP);
//	W_GP(PC, 13, LOW);
//	init_interrupt_PA0();
//	init_systick_delay();
	init_systick_interrupt(1000);
 800051c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000520:	f7ff ffc0 	bl	80004a4 <init_systick_interrupt>



	while(1){
 8000524:	e7fe      	b.n	8000524 <main+0x1c>
	...

08000528 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800052a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800052c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000530:	480c      	ldr	r0, [pc, #48]	; (8000564 <LoopForever+0x6>)
  ldr r1, =_edata
 8000532:	490d      	ldr	r1, [pc, #52]	; (8000568 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000534:	4a0d      	ldr	r2, [pc, #52]	; (800056c <LoopForever+0xe>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000538:	e002      	b.n	8000540 <LoopCopyDataInit>

0800053a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800053c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053e:	3304      	adds	r3, #4

08000540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000544:	d3f9      	bcc.n	800053a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000546:	4a0a      	ldr	r2, [pc, #40]	; (8000570 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000548:	4c0a      	ldr	r4, [pc, #40]	; (8000574 <LoopForever+0x16>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800054c:	e001      	b.n	8000552 <LoopFillZerobss>

0800054e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000550:	3204      	adds	r2, #4

08000552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000554:	d3fb      	bcc.n	800054e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000556:	f000 f811 	bl	800057c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055a:	f7ff ffd5 	bl	8000508 <main>

0800055e <LoopForever>:

LoopForever:
    b LoopForever
 800055e:	e7fe      	b.n	800055e <LoopForever>
  ldr   r0, =_estack
 8000560:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000568:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800056c:	080005e4 	.word	0x080005e4
  ldr r2, =_sbss
 8000570:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000574:	2000001c 	.word	0x2000001c

08000578 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000578:	e7fe      	b.n	8000578 <ADC1_2_IRQHandler>
	...

0800057c <__libc_init_array>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	2600      	movs	r6, #0
 8000580:	4d0c      	ldr	r5, [pc, #48]	; (80005b4 <__libc_init_array+0x38>)
 8000582:	4c0d      	ldr	r4, [pc, #52]	; (80005b8 <__libc_init_array+0x3c>)
 8000584:	1b64      	subs	r4, r4, r5
 8000586:	10a4      	asrs	r4, r4, #2
 8000588:	42a6      	cmp	r6, r4
 800058a:	d109      	bne.n	80005a0 <__libc_init_array+0x24>
 800058c:	f000 f81a 	bl	80005c4 <_init>
 8000590:	2600      	movs	r6, #0
 8000592:	4d0a      	ldr	r5, [pc, #40]	; (80005bc <__libc_init_array+0x40>)
 8000594:	4c0a      	ldr	r4, [pc, #40]	; (80005c0 <__libc_init_array+0x44>)
 8000596:	1b64      	subs	r4, r4, r5
 8000598:	10a4      	asrs	r4, r4, #2
 800059a:	42a6      	cmp	r6, r4
 800059c:	d105      	bne.n	80005aa <__libc_init_array+0x2e>
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005a4:	4798      	blx	r3
 80005a6:	3601      	adds	r6, #1
 80005a8:	e7ee      	b.n	8000588 <__libc_init_array+0xc>
 80005aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ae:	4798      	blx	r3
 80005b0:	3601      	adds	r6, #1
 80005b2:	e7f2      	b.n	800059a <__libc_init_array+0x1e>
 80005b4:	080005dc 	.word	0x080005dc
 80005b8:	080005dc 	.word	0x080005dc
 80005bc:	080005dc 	.word	0x080005dc
 80005c0:	080005e0 	.word	0x080005e0

080005c4 <_init>:
 80005c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c6:	bf00      	nop
 80005c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ca:	bc08      	pop	{r3}
 80005cc:	469e      	mov	lr, r3
 80005ce:	4770      	bx	lr

080005d0 <_fini>:
 80005d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d2:	bf00      	nop
 80005d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005d6:	bc08      	pop	{r3}
 80005d8:	469e      	mov	lr, r3
 80005da:	4770      	bx	lr
