
STM32F103C6 LIBRARY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004b0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080005e0  080005e0  000105e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005e8  080005e8  000105f0  2**0
                  CONTENTS
  4 .ARM          00000000  080005e8  080005e8  000105f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005e8  080005f0  000105f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005e8  080005e8  000105e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005ec  080005ec  000105ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080005f0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080005f0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000105f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000eed  00000000  00000000  00010619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005b4  00000000  00000000  00011506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000120  00000000  00000000  00011ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000c8  00000000  00000000  00011be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000e8a  00000000  00000000  00011ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001708  00000000  00000000  00012b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053858  00000000  00000000  0001423a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00067a92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002b8  00000000  00000000  00067ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080005c8 	.word	0x080005c8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080005c8 	.word	0x080005c8

08000170 <init_GP>:
 *      Author: ad
 */
#include "gpio.h"

void init_GP(unsigned short port, unsigned short pin, unsigned short dir, unsigned short opt)
{
 8000170:	b490      	push	{r4, r7}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	4604      	mov	r4, r0
 8000178:	4608      	mov	r0, r1
 800017a:	4611      	mov	r1, r2
 800017c:	461a      	mov	r2, r3
 800017e:	4623      	mov	r3, r4
 8000180:	80fb      	strh	r3, [r7, #6]
 8000182:	4603      	mov	r3, r0
 8000184:	80bb      	strh	r3, [r7, #4]
 8000186:	460b      	mov	r3, r1
 8000188:	807b      	strh	r3, [r7, #2]
 800018a:	4613      	mov	r3, r2
 800018c:	803b      	strh	r3, [r7, #0]
	//examble  =  init_GP(PA,0,OUT50,O_GP_PP);
 volatile unsigned long * CR;
 unsigned short tPIN = pin;
 800018e:	88bb      	ldrh	r3, [r7, #4]
 8000190:	817b      	strh	r3, [r7, #10]
 unsigned short offset = 0x00;
 8000192:	2300      	movs	r3, #0
 8000194:	813b      	strh	r3, [r7, #8]

	if(pin > 7)
 8000196:	88bb      	ldrh	r3, [r7, #4]
 8000198:	2b07      	cmp	r3, #7
 800019a:	d904      	bls.n	80001a6 <init_GP+0x36>
		{
			tPIN -= 8;
 800019c:	897b      	ldrh	r3, [r7, #10]
 800019e:	3b08      	subs	r3, #8
 80001a0:	817b      	strh	r3, [r7, #10]
			offset = 0x01;
 80001a2:	2301      	movs	r3, #1
 80001a4:	813b      	strh	r3, [r7, #8]
		}

	if(port == 1)
 80001a6:	88fb      	ldrh	r3, [r7, #6]
 80001a8:	2b01      	cmp	r3, #1
 80001aa:	d10d      	bne.n	80001c8 <init_GP+0x58>
		{
			RCC_APB2ENR |= 4; // Bật clock cho port A
 80001ac:	4b27      	ldr	r3, [pc, #156]	; (800024c <init_GP+0xdc>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a26      	ldr	r2, [pc, #152]	; (800024c <init_GP+0xdc>)
 80001b2:	f043 0304 	orr.w	r3, r3, #4
 80001b6:	6013      	str	r3, [r2, #0]
			CR = (volatile unsigned long *) (&GPIO_A + offset);
 80001b8:	893b      	ldrh	r3, [r7, #8]
 80001ba:	009b      	lsls	r3, r3, #2
 80001bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80001c0:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80001c4:	60fb      	str	r3, [r7, #12]
 80001c6:	e020      	b.n	800020a <init_GP+0x9a>
		}
	else if(port == 2)
 80001c8:	88fb      	ldrh	r3, [r7, #6]
 80001ca:	2b02      	cmp	r3, #2
 80001cc:	d10d      	bne.n	80001ea <init_GP+0x7a>
		{
			RCC_APB2ENR |= 8; // Bật clock cho port B
 80001ce:	4b1f      	ldr	r3, [pc, #124]	; (800024c <init_GP+0xdc>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a1e      	ldr	r2, [pc, #120]	; (800024c <init_GP+0xdc>)
 80001d4:	f043 0308 	orr.w	r3, r3, #8
 80001d8:	6013      	str	r3, [r2, #0]
			CR = (volatile unsigned long *) (&GPIO_B + offset);
 80001da:	893b      	ldrh	r3, [r7, #8]
 80001dc:	009b      	lsls	r3, r3, #2
 80001de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80001e2:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80001e6:	60fb      	str	r3, [r7, #12]
 80001e8:	e00f      	b.n	800020a <init_GP+0x9a>
		}
	else if(port == 3)
 80001ea:	88fb      	ldrh	r3, [r7, #6]
 80001ec:	2b03      	cmp	r3, #3
 80001ee:	d10c      	bne.n	800020a <init_GP+0x9a>
		{
			RCC_APB2ENR |= 0x10; // Bật clock cho port C
 80001f0:	4b16      	ldr	r3, [pc, #88]	; (800024c <init_GP+0xdc>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a15      	ldr	r2, [pc, #84]	; (800024c <init_GP+0xdc>)
 80001f6:	f043 0310 	orr.w	r3, r3, #16
 80001fa:	6013      	str	r3, [r2, #0]
			CR = (volatile unsigned long *) (&GPIO_C + offset);
 80001fc:	893b      	ldrh	r3, [r7, #8]
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000204:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8000208:	60fb      	str	r3, [r7, #12]
		}

		*CR &= ~(0xf<<(tPIN)*4); //Reset cấu hình của pin
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	897a      	ldrh	r2, [r7, #10]
 8000210:	0092      	lsls	r2, r2, #2
 8000212:	210f      	movs	r1, #15
 8000214:	fa01 f202 	lsl.w	r2, r1, r2
 8000218:	43d2      	mvns	r2, r2
 800021a:	401a      	ands	r2, r3
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	601a      	str	r2, [r3, #0]
		*CR |= ((dir <<(tPIN*4)) | (opt<<(tPIN*4+2))); //cấu hình pin
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	8879      	ldrh	r1, [r7, #2]
 8000226:	897a      	ldrh	r2, [r7, #10]
 8000228:	0092      	lsls	r2, r2, #2
 800022a:	4091      	lsls	r1, r2
 800022c:	8838      	ldrh	r0, [r7, #0]
 800022e:	897a      	ldrh	r2, [r7, #10]
 8000230:	0092      	lsls	r2, r2, #2
 8000232:	3202      	adds	r2, #2
 8000234:	fa00 f202 	lsl.w	r2, r0, r2
 8000238:	430a      	orrs	r2, r1
 800023a:	431a      	orrs	r2, r3
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	601a      	str	r2, [r3, #0]
}
 8000240:	bf00      	nop
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bc90      	pop	{r4, r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40021018 	.word	0x40021018

08000250 <W_GP>:
	state = ((*IDR & (1<<pin))>>pin);
	return state;
}

void W_GP(unsigned short port, unsigned short pin, unsigned short state)
{
 8000250:	b480      	push	{r7}
 8000252:	b085      	sub	sp, #20
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	80fb      	strh	r3, [r7, #6]
 800025a:	460b      	mov	r3, r1
 800025c:	80bb      	strh	r3, [r7, #4]
 800025e:	4613      	mov	r3, r2
 8000260:	807b      	strh	r3, [r7, #2]
		volatile unsigned long * ODR;
		unsigned long offset = 0x03;
 8000262:	2303      	movs	r3, #3
 8000264:	60bb      	str	r3, [r7, #8]


	if(port == 1)
 8000266:	88fb      	ldrh	r3, [r7, #6]
 8000268:	2b01      	cmp	r3, #1
 800026a:	d107      	bne.n	800027c <W_GP+0x2c>
		{
			ODR = (volatile unsigned long *) (&GPIO_A + offset);
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000274:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	e014      	b.n	80002a6 <W_GP+0x56>
		}
	else if(port == 2)
 800027c:	88fb      	ldrh	r3, [r7, #6]
 800027e:	2b02      	cmp	r3, #2
 8000280:	d107      	bne.n	8000292 <W_GP+0x42>
		{
			ODR = (volatile unsigned long *) (&GPIO_B + offset);
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	009b      	lsls	r3, r3, #2
 8000286:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800028a:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e009      	b.n	80002a6 <W_GP+0x56>
		}
	else if(port == 3)
 8000292:	88fb      	ldrh	r3, [r7, #6]
 8000294:	2b03      	cmp	r3, #3
 8000296:	d106      	bne.n	80002a6 <W_GP+0x56>
	{
		ODR = (volatile unsigned long *) (&GPIO_C + offset);
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80002a0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80002a4:	60fb      	str	r3, [r7, #12]
	}
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
 80002a6:	887b      	ldrh	r3, [r7, #2]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d009      	beq.n	80002c0 <W_GP+0x70>
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	8879      	ldrh	r1, [r7, #2]
 80002b2:	88ba      	ldrh	r2, [r7, #4]
 80002b4:	fa01 f202 	lsl.w	r2, r1, r2
 80002b8:	431a      	orrs	r2, r3
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	601a      	str	r2, [r3, #0]
}
 80002be:	e009      	b.n	80002d4 <W_GP+0x84>
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	88ba      	ldrh	r2, [r7, #4]
 80002c6:	2101      	movs	r1, #1
 80002c8:	fa01 f202 	lsl.w	r2, r1, r2
 80002cc:	43d2      	mvns	r2, r2
 80002ce:	401a      	ands	r2, r3
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	601a      	str	r2, [r3, #0]
}
 80002d4:	bf00      	nop
 80002d6:	3714      	adds	r7, #20
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr
	...

080002e0 <EXTI0_IRQHandler>:
		EXTI->RTSR|=1;
		__disable_irq();
		NVIC_EnableIRQ(EXTI0_IRQn);
		__enable_irq();
}
void EXTI0_IRQHandler(){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	//xóa bit nhớ sự kiện ngắt
	EXTI->PR |=1;
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <EXTI0_IRQHandler+0x1c>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	4a04      	ldr	r2, [pc, #16]	; (80002fc <EXTI0_IRQHandler+0x1c>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6153      	str	r3, [r2, #20]
	delay_ms(50);
 80002f0:	2032      	movs	r0, #50	; 0x32
 80002f2:	f000 f8e5 	bl	80004c0 <delay_ms>
//			}else{
//				interrupt_PA0=1;
//			}


}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40010400 	.word	0x40010400

08000300 <spi_init>:

#include "stm32f1xx.h"
#include "gpio.h"
#include "spi.h"

void spi_init(unsigned short spi){
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	80fb      	strh	r3, [r7, #6]
RCC->APB2ENR |= 1; // Bật cờ AFIO
 800030a:	4b23      	ldr	r3, [pc, #140]	; (8000398 <spi_init+0x98>)
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	4a22      	ldr	r2, [pc, #136]	; (8000398 <spi_init+0x98>)
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	6193      	str	r3, [r2, #24]

if(spi ==1)
 8000316:	88fb      	ldrh	r3, [r7, #6]
 8000318:	2b01      	cmp	r3, #1
 800031a:	d138      	bne.n	800038e <spi_init+0x8e>
{

	RCC->APB2ENR |= 0x1000; //Bật clock spi 1
 800031c:	4b1e      	ldr	r3, [pc, #120]	; (8000398 <spi_init+0x98>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a1d      	ldr	r2, [pc, #116]	; (8000398 <spi_init+0x98>)
 8000322:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000326:	6193      	str	r3, [r2, #24]
	// Cấu hình 4 chân của spi1
	init_GP(PA,4,OUT50,O_GP_PP);
 8000328:	2300      	movs	r3, #0
 800032a:	2203      	movs	r2, #3
 800032c:	2104      	movs	r1, #4
 800032e:	2001      	movs	r0, #1
 8000330:	f7ff ff1e 	bl	8000170 <init_GP>
	init_GP(PA,5,OUT50,O_AF_PP);
 8000334:	2302      	movs	r3, #2
 8000336:	2203      	movs	r2, #3
 8000338:	2105      	movs	r1, #5
 800033a:	2001      	movs	r0, #1
 800033c:	f7ff ff18 	bl	8000170 <init_GP>
	init_GP(PA,6,IN,I_PP);
 8000340:	2302      	movs	r3, #2
 8000342:	2200      	movs	r2, #0
 8000344:	2106      	movs	r1, #6
 8000346:	2001      	movs	r0, #1
 8000348:	f7ff ff12 	bl	8000170 <init_GP>
	init_GP(PA,7,OUT50,O_AF_PP);
 800034c:	2302      	movs	r3, #2
 800034e:	2203      	movs	r2, #3
 8000350:	2107      	movs	r1, #7
 8000352:	2001      	movs	r0, #1
 8000354:	f7ff ff0c 	bl	8000170 <init_GP>

	//cài đặt cấu hình
	SPI1->CR1 |= 0x4; // Master Mode
 8000358:	4b10      	ldr	r3, [pc, #64]	; (800039c <spi_init+0x9c>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a0f      	ldr	r2, [pc, #60]	; (800039c <spi_init+0x9c>)
 800035e:	f043 0304 	orr.w	r3, r3, #4
 8000362:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= 0x00; // fclk / 2
 8000364:	4b0d      	ldr	r3, [pc, #52]	; (800039c <spi_init+0x9c>)
 8000366:	4a0d      	ldr	r2, [pc, #52]	; (800039c <spi_init+0x9c>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	6013      	str	r3, [r2, #0]
	SPI1->CR2 |= 0x4;
 800036c:	4b0b      	ldr	r3, [pc, #44]	; (800039c <spi_init+0x9c>)
 800036e:	685b      	ldr	r3, [r3, #4]
 8000370:	4a0a      	ldr	r2, [pc, #40]	; (800039c <spi_init+0x9c>)
 8000372:	f043 0304 	orr.w	r3, r3, #4
 8000376:	6053      	str	r3, [r2, #4]
	SPI1->CR1 |= 0x40; // Bật spi1
 8000378:	4b08      	ldr	r3, [pc, #32]	; (800039c <spi_init+0x9c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a07      	ldr	r2, [pc, #28]	; (800039c <spi_init+0x9c>)
 800037e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000382:	6013      	str	r3, [r2, #0]
	W_GP(PA,4,HIGH);
 8000384:	2201      	movs	r2, #1
 8000386:	2104      	movs	r1, #4
 8000388:	2001      	movs	r0, #1
 800038a:	f7ff ff61 	bl	8000250 <W_GP>
//	W_GP(PB,12,HIGH);
//}



}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40021000 	.word	0x40021000
 800039c:	40013000 	.word	0x40013000

080003a0 <spi_msg>:
//	}
}


void spi_msg(unsigned short spi, char str[])
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	6039      	str	r1, [r7, #0]
 80003aa:	80fb      	strh	r3, [r7, #6]
int i =0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
	if (spi==1)
 80003b0:	88fb      	ldrh	r3, [r7, #6]
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d120      	bne.n	80003f8 <spi_msg+0x58>
	{
	W_GP(PC,13,LOW);
 80003b6:	2200      	movs	r2, #0
 80003b8:	210d      	movs	r1, #13
 80003ba:	2003      	movs	r0, #3
 80003bc:	f7ff ff48 	bl	8000250 <W_GP>
	while(str[i])
 80003c0:	e00f      	b.n	80003e2 <spi_msg+0x42>
	{
		SPI1->DR = str[i];
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	683a      	ldr	r2, [r7, #0]
 80003c6:	4413      	add	r3, r2
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <spi_msg+0x60>)
 80003cc:	60da      	str	r2, [r3, #12]
		while(SPI1->SR & SPI_SR_BSY){}
 80003ce:	bf00      	nop
 80003d0:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <spi_msg+0x60>)
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d1f9      	bne.n	80003d0 <spi_msg+0x30>
		i++;
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	3301      	adds	r3, #1
 80003e0:	60fb      	str	r3, [r7, #12]
	while(str[i])
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	683a      	ldr	r2, [r7, #0]
 80003e6:	4413      	add	r3, r2
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d1e9      	bne.n	80003c2 <spi_msg+0x22>
	}
	W_GP(PC,13,HIGH);
 80003ee:	2201      	movs	r2, #1
 80003f0:	210d      	movs	r1, #13
 80003f2:	2003      	movs	r0, #3
 80003f4:	f7ff ff2c 	bl	8000250 <W_GP>
//		while(SPI2->SR & 0x80){}
//		i++;
//	}
//	W_GP(PB,12,HIGH);
//	}
}
 80003f8:	bf00      	nop
 80003fa:	3710      	adds	r7, #16
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40013000 	.word	0x40013000

08000404 <config_clock>:
 */


#include "system_clock.h"

void config_clock(void){
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
	//bật clock ngoại 8Mhz
	RCC->CR |= RCC_CR_HSEON;
 8000408:	4b20      	ldr	r3, [pc, #128]	; (800048c <config_clock+0x88>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a1f      	ldr	r2, [pc, #124]	; (800048c <config_clock+0x88>)
 800040e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000412:	6013      	str	r3, [r2, #0]
	//đợi cho clock ngoại bật xong
	while(!(RCC->CR & RCC_CR_HSERDY) );
 8000414:	bf00      	nop
 8000416:	4b1d      	ldr	r3, [pc, #116]	; (800048c <config_clock+0x88>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800041e:	2b00      	cmp	r3, #0
 8000420:	d0f9      	beq.n	8000416 <config_clock+0x12>
	//chọn clock chính là clock ngoại hse
	RCC->CFGR |= RCC_CFGR_SW_HSE;
 8000422:	4b1a      	ldr	r3, [pc, #104]	; (800048c <config_clock+0x88>)
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	4a19      	ldr	r2, [pc, #100]	; (800048c <config_clock+0x88>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6053      	str	r3, [r2, #4]
	//đợi chọn clock chính là clock ngoại hse xong
	while(!(RCC->CFGR & RCC_CFGR_SWS_HSE));
 800042e:	bf00      	nop
 8000430:	4b16      	ldr	r3, [pc, #88]	; (800048c <config_clock+0x88>)
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	f003 0304 	and.w	r3, r3, #4
 8000438:	2b00      	cmp	r3, #0
 800043a:	d0f9      	beq.n	8000430 <config_clock+0x2c>
	//cấu hình các bộ chia clock
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 800043c:	4b13      	ldr	r3, [pc, #76]	; (800048c <config_clock+0x88>)
 800043e:	4a13      	ldr	r2, [pc, #76]	; (800048c <config_clock+0x88>)
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	6053      	str	r3, [r2, #4]
	RCC->CFGR|= RCC_CFGR_PPRE2_DIV1;
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <config_clock+0x88>)
 8000446:	4a11      	ldr	r2, [pc, #68]	; (800048c <config_clock+0x88>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	6053      	str	r3, [r2, #4]
	//bật clock cho,Timer1 clock về apb2 là 8Mhz
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <config_clock+0x88>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a0e      	ldr	r2, [pc, #56]	; (800048c <config_clock+0x88>)
 8000452:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000456:	6193      	str	r3, [r2, #24]
	//cấu hình max thanh ghi đếm của timer
	TIM1->ARR =0xffff-1;
 8000458:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <config_clock+0x8c>)
 800045a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800045e:	62da      	str	r2, [r3, #44]	; 0x2c
	//bộ chia của timer1 là 8: clock của timer1 là 8Mhz/8=1Mhz
	TIM1->PSC =8-1;
 8000460:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <config_clock+0x8c>)
 8000462:	2207      	movs	r2, #7
 8000464:	629a      	str	r2, [r3, #40]	; 0x28
	//Bật timer1
	TIM1->CR1 |=TIM_CR1_CEN;
 8000466:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <config_clock+0x8c>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a09      	ldr	r2, [pc, #36]	; (8000490 <config_clock+0x8c>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	6013      	str	r3, [r2, #0]
	//Đợi timer1 bật xong
	while(! (TIM1->SR & TIM_SR_UIF ));
 8000472:	bf00      	nop
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <config_clock+0x8c>)
 8000476:	691b      	ldr	r3, [r3, #16]
 8000478:	f003 0301 	and.w	r3, r3, #1
 800047c:	2b00      	cmp	r3, #0
 800047e:	d0f9      	beq.n	8000474 <config_clock+0x70>



}
 8000480:	bf00      	nop
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	40021000 	.word	0x40021000
 8000490:	40012c00 	.word	0x40012c00

08000494 <delay_us>:
void delay_us(uint16_t us ){
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	80fb      	strh	r3, [r7, #6]
	TIM1->CNT=0;
 800049e:	4b07      	ldr	r3, [pc, #28]	; (80004bc <delay_us+0x28>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM1->CNT <us);
 80004a4:	bf00      	nop
 80004a6:	4b05      	ldr	r3, [pc, #20]	; (80004bc <delay_us+0x28>)
 80004a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004aa:	88fb      	ldrh	r3, [r7, #6]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d3fa      	bcc.n	80004a6 <delay_us+0x12>

}
 80004b0:	bf00      	nop
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	40012c00 	.word	0x40012c00

080004c0 <delay_ms>:
void delay_ms(uint16_t ms){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	80fb      	strh	r3, [r7, #6]

	for (uint16_t i=0; i<ms ;i++){
 80004ca:	2300      	movs	r3, #0
 80004cc:	81fb      	strh	r3, [r7, #14]
 80004ce:	e006      	b.n	80004de <delay_ms+0x1e>
		delay_us(1000);
 80004d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004d4:	f7ff ffde 	bl	8000494 <delay_us>
	for (uint16_t i=0; i<ms ;i++){
 80004d8:	89fb      	ldrh	r3, [r7, #14]
 80004da:	3301      	adds	r3, #1
 80004dc:	81fb      	strh	r3, [r7, #14]
 80004de:	89fa      	ldrh	r2, [r7, #14]
 80004e0:	88fb      	ldrh	r3, [r7, #6]
 80004e2:	429a      	cmp	r2, r3
 80004e4:	d3f4      	bcc.n	80004d0 <delay_ms+0x10>
	}
}
 80004e6:	bf00      	nop
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <main>:
//
//uint8_t usart1_data[255]="";
//uint8_t usart2_data[255]="";

int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	//cấu hình clock ngoại 8Mhz, bộ chia của các bus cấu hình bằng 1
	//bắt buộc phải config_clock();
	//---------------------------------------xxx-------------------------------------------------------
	config_clock();
 80004f4:	f7ff ff86 	bl	8000404 <config_clock>
	//---------------------------------------xxx-------------------------------------------------------
	init_GP(PC,13,OUT50,O_GP_PP);
 80004f8:	2300      	movs	r3, #0
 80004fa:	2203      	movs	r2, #3
 80004fc:	210d      	movs	r1, #13
 80004fe:	2003      	movs	r0, #3
 8000500:	f7ff fe36 	bl	8000170 <init_GP>
	W_GP(PC, 13,HIGH);
 8000504:	2201      	movs	r2, #1
 8000506:	210d      	movs	r1, #13
 8000508:	2003      	movs	r0, #3
 800050a:	f7ff fea1 	bl	8000250 <W_GP>
//	init_usart(1, 9600);
//	init_usart_rx_interrupt(1);
//	lcd_init();
//	lcd_init_4();
//	i2c_init(1, i2c_SM);
	spi_init(1);
 800050e:	2001      	movs	r0, #1
 8000510:	f7ff fef6 	bl	8000300 <spi_init>


	while(1){
		delay_ms(1000);
 8000514:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000518:	f7ff ffd2 	bl	80004c0 <delay_ms>
		spi_msg(1, "abcde");
 800051c:	4902      	ldr	r1, [pc, #8]	; (8000528 <main+0x38>)
 800051e:	2001      	movs	r0, #1
 8000520:	f7ff ff3e 	bl	80003a0 <spi_msg>
		delay_ms(1000);
 8000524:	e7f6      	b.n	8000514 <main+0x24>
 8000526:	bf00      	nop
 8000528:	080005e0 	.word	0x080005e0

0800052c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800052c:	480d      	ldr	r0, [pc, #52]	; (8000564 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800052e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000530:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000534:	480c      	ldr	r0, [pc, #48]	; (8000568 <LoopForever+0x6>)
  ldr r1, =_edata
 8000536:	490d      	ldr	r1, [pc, #52]	; (800056c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000538:	4a0d      	ldr	r2, [pc, #52]	; (8000570 <LoopForever+0xe>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800053c:	e002      	b.n	8000544 <LoopCopyDataInit>

0800053e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000542:	3304      	adds	r3, #4

08000544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000548:	d3f9      	bcc.n	800053e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054a:	4a0a      	ldr	r2, [pc, #40]	; (8000574 <LoopForever+0x12>)
  ldr r4, =_ebss
 800054c:	4c0a      	ldr	r4, [pc, #40]	; (8000578 <LoopForever+0x16>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000550:	e001      	b.n	8000556 <LoopFillZerobss>

08000552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000554:	3204      	adds	r2, #4

08000556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000558:	d3fb      	bcc.n	8000552 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800055a:	f000 f811 	bl	8000580 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055e:	f7ff ffc7 	bl	80004f0 <main>

08000562 <LoopForever>:

LoopForever:
    b LoopForever
 8000562:	e7fe      	b.n	8000562 <LoopForever>
  ldr   r0, =_estack
 8000564:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800056c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000570:	080005f0 	.word	0x080005f0
  ldr r2, =_sbss
 8000574:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000578:	2000001c 	.word	0x2000001c

0800057c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800057c:	e7fe      	b.n	800057c <ADC1_2_IRQHandler>
	...

08000580 <__libc_init_array>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	2600      	movs	r6, #0
 8000584:	4d0c      	ldr	r5, [pc, #48]	; (80005b8 <__libc_init_array+0x38>)
 8000586:	4c0d      	ldr	r4, [pc, #52]	; (80005bc <__libc_init_array+0x3c>)
 8000588:	1b64      	subs	r4, r4, r5
 800058a:	10a4      	asrs	r4, r4, #2
 800058c:	42a6      	cmp	r6, r4
 800058e:	d109      	bne.n	80005a4 <__libc_init_array+0x24>
 8000590:	f000 f81a 	bl	80005c8 <_init>
 8000594:	2600      	movs	r6, #0
 8000596:	4d0a      	ldr	r5, [pc, #40]	; (80005c0 <__libc_init_array+0x40>)
 8000598:	4c0a      	ldr	r4, [pc, #40]	; (80005c4 <__libc_init_array+0x44>)
 800059a:	1b64      	subs	r4, r4, r5
 800059c:	10a4      	asrs	r4, r4, #2
 800059e:	42a6      	cmp	r6, r4
 80005a0:	d105      	bne.n	80005ae <__libc_init_array+0x2e>
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80005a8:	4798      	blx	r3
 80005aa:	3601      	adds	r6, #1
 80005ac:	e7ee      	b.n	800058c <__libc_init_array+0xc>
 80005ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80005b2:	4798      	blx	r3
 80005b4:	3601      	adds	r6, #1
 80005b6:	e7f2      	b.n	800059e <__libc_init_array+0x1e>
 80005b8:	080005e8 	.word	0x080005e8
 80005bc:	080005e8 	.word	0x080005e8
 80005c0:	080005e8 	.word	0x080005e8
 80005c4:	080005ec 	.word	0x080005ec

080005c8 <_init>:
 80005c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ca:	bf00      	nop
 80005cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ce:	bc08      	pop	{r3}
 80005d0:	469e      	mov	lr, r3
 80005d2:	4770      	bx	lr

080005d4 <_fini>:
 80005d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d6:	bf00      	nop
 80005d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005da:	bc08      	pop	{r3}
 80005dc:	469e      	mov	lr, r3
 80005de:	4770      	bx	lr
