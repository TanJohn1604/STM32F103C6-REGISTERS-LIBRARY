
STM32F103C6 LIBRARY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001148  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001278  08001278  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001278  08001278  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001278  08001278  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001278  08001278  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001278  08001278  00011278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800127c  0800127c  0001127c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  0800128c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  0800128c  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000016ec  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008fc  00000000  00000000  00021721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000188  00000000  00000000  00022020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000110  00000000  00000000  000221a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000101d6  00000000  00000000  000222b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000022ca  00000000  00000000  0003248e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053990  00000000  00000000  00034758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000880e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005c4  00000000  00000000  0008813c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001260 	.word	0x08001260

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	08001260 	.word	0x08001260

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <init_GP>:
 *      Author: ad
 */
#include "gpio.h"

void init_GP(unsigned short port, unsigned short pin, unsigned short dir, unsigned short opt)
{
 8000a5c:	b490      	push	{r4, r7}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4604      	mov	r4, r0
 8000a64:	4608      	mov	r0, r1
 8000a66:	4611      	mov	r1, r2
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4623      	mov	r3, r4
 8000a6c:	80fb      	strh	r3, [r7, #6]
 8000a6e:	4603      	mov	r3, r0
 8000a70:	80bb      	strh	r3, [r7, #4]
 8000a72:	460b      	mov	r3, r1
 8000a74:	807b      	strh	r3, [r7, #2]
 8000a76:	4613      	mov	r3, r2
 8000a78:	803b      	strh	r3, [r7, #0]
	//examble  =  init_GP(PA,0,OUT50,O_GP_PP);
 volatile unsigned long * CR;
 unsigned short tPIN = pin;
 8000a7a:	88bb      	ldrh	r3, [r7, #4]
 8000a7c:	817b      	strh	r3, [r7, #10]
 unsigned short offset = 0x00;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	813b      	strh	r3, [r7, #8]

	if(pin > 7)
 8000a82:	88bb      	ldrh	r3, [r7, #4]
 8000a84:	2b07      	cmp	r3, #7
 8000a86:	d904      	bls.n	8000a92 <init_GP+0x36>
		{
			tPIN -= 8;
 8000a88:	897b      	ldrh	r3, [r7, #10]
 8000a8a:	3b08      	subs	r3, #8
 8000a8c:	817b      	strh	r3, [r7, #10]
			offset = 0x01;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	813b      	strh	r3, [r7, #8]
		}

	if(port == 1)
 8000a92:	88fb      	ldrh	r3, [r7, #6]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d10d      	bne.n	8000ab4 <init_GP+0x58>
		{
			RCC_APB2ENR |= 4; // Bật clock cho port A
 8000a98:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <init_GP+0xdc>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a26      	ldr	r2, [pc, #152]	; (8000b38 <init_GP+0xdc>)
 8000a9e:	f043 0304 	orr.w	r3, r3, #4
 8000aa2:	6013      	str	r3, [r2, #0]
			CR = (volatile unsigned long *) (&GPIO_A + offset);
 8000aa4:	893b      	ldrh	r3, [r7, #8]
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000aac:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	e020      	b.n	8000af6 <init_GP+0x9a>
		}
	else if(port == 2)
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d10d      	bne.n	8000ad6 <init_GP+0x7a>
		{
			RCC_APB2ENR |= 8; // Bật clock cho port B
 8000aba:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <init_GP+0xdc>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a1e      	ldr	r2, [pc, #120]	; (8000b38 <init_GP+0xdc>)
 8000ac0:	f043 0308 	orr.w	r3, r3, #8
 8000ac4:	6013      	str	r3, [r2, #0]
			CR = (volatile unsigned long *) (&GPIO_B + offset);
 8000ac6:	893b      	ldrh	r3, [r7, #8]
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ace:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	e00f      	b.n	8000af6 <init_GP+0x9a>
		}
	else if(port == 3)
 8000ad6:	88fb      	ldrh	r3, [r7, #6]
 8000ad8:	2b03      	cmp	r3, #3
 8000ada:	d10c      	bne.n	8000af6 <init_GP+0x9a>
		{
			RCC_APB2ENR |= 0x10; // Bật clock cho port C
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <init_GP+0xdc>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a15      	ldr	r2, [pc, #84]	; (8000b38 <init_GP+0xdc>)
 8000ae2:	f043 0310 	orr.w	r3, r3, #16
 8000ae6:	6013      	str	r3, [r2, #0]
			CR = (volatile unsigned long *) (&GPIO_C + offset);
 8000ae8:	893b      	ldrh	r3, [r7, #8]
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000af0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8000af4:	60fb      	str	r3, [r7, #12]
		}

		*CR &= ~(0xf<<(tPIN)*4); //Reset cấu hình của pin
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	897a      	ldrh	r2, [r7, #10]
 8000afc:	0092      	lsls	r2, r2, #2
 8000afe:	210f      	movs	r1, #15
 8000b00:	fa01 f202 	lsl.w	r2, r1, r2
 8000b04:	43d2      	mvns	r2, r2
 8000b06:	401a      	ands	r2, r3
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	601a      	str	r2, [r3, #0]
		*CR |= ((dir <<(tPIN*4)) | (opt<<(tPIN*4+2))); //cấu hình pin
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	8879      	ldrh	r1, [r7, #2]
 8000b12:	897a      	ldrh	r2, [r7, #10]
 8000b14:	0092      	lsls	r2, r2, #2
 8000b16:	4091      	lsls	r1, r2
 8000b18:	8838      	ldrh	r0, [r7, #0]
 8000b1a:	897a      	ldrh	r2, [r7, #10]
 8000b1c:	0092      	lsls	r2, r2, #2
 8000b1e:	3202      	adds	r2, #2
 8000b20:	fa00 f202 	lsl.w	r2, r0, r2
 8000b24:	430a      	orrs	r2, r1
 8000b26:	431a      	orrs	r2, r3
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	601a      	str	r2, [r3, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc90      	pop	{r4, r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40021018 	.word	0x40021018

08000b3c <W_GP>:
	state = ((*IDR & (1<<pin))>>pin);
	return state;
}

void W_GP(unsigned short port, unsigned short pin, unsigned short state)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	80fb      	strh	r3, [r7, #6]
 8000b46:	460b      	mov	r3, r1
 8000b48:	80bb      	strh	r3, [r7, #4]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	807b      	strh	r3, [r7, #2]
		volatile unsigned long * ODR;
		unsigned long offset = 0x03;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	60bb      	str	r3, [r7, #8]


	if(port == 1)
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d107      	bne.n	8000b68 <W_GP+0x2c>
		{
			ODR = (volatile unsigned long *) (&GPIO_A + offset);
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b60:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	e014      	b.n	8000b92 <W_GP+0x56>
		}
	else if(port == 2)
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d107      	bne.n	8000b7e <W_GP+0x42>
		{
			ODR = (volatile unsigned long *) (&GPIO_B + offset);
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b76:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	e009      	b.n	8000b92 <W_GP+0x56>
		}
	else if(port == 3)
 8000b7e:	88fb      	ldrh	r3, [r7, #6]
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	d106      	bne.n	8000b92 <W_GP+0x56>
	{
		ODR = (volatile unsigned long *) (&GPIO_C + offset);
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b8c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8000b90:	60fb      	str	r3, [r7, #12]
	}
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
 8000b92:	887b      	ldrh	r3, [r7, #2]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d009      	beq.n	8000bac <W_GP+0x70>
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	8879      	ldrh	r1, [r7, #2]
 8000b9e:	88ba      	ldrh	r2, [r7, #4]
 8000ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	601a      	str	r2, [r3, #0]
}
 8000baa:	e009      	b.n	8000bc0 <W_GP+0x84>
	state ? (*ODR |= (state<<pin)) : (*ODR &= ~(1<<pin));
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	88ba      	ldrh	r2, [r7, #4]
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb8:	43d2      	mvns	r2, r2
 8000bba:	401a      	ands	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	601a      	str	r2, [r3, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
	...

08000bcc <EXTI0_IRQHandler>:
		EXTI->RTSR|=1;
		__disable_irq();
		NVIC_EnableIRQ(EXTI0_IRQn);
		__enable_irq();
}
void EXTI0_IRQHandler(){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	//xóa bit nhớ sự kiện ngắt
	EXTI->PR |=1;
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <EXTI0_IRQHandler+0x1c>)
 8000bd2:	695b      	ldr	r3, [r3, #20]
 8000bd4:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <EXTI0_IRQHandler+0x1c>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6153      	str	r3, [r2, #20]
	delay_ms(50);
 8000bdc:	2032      	movs	r0, #50	; 0x32
 8000bde:	f000 f863 	bl	8000ca8 <delay_ms>
//			}else{
//				interrupt_PA0=1;
//			}


}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40010400 	.word	0x40010400

08000bec <config_clock>:
 */


#include "system_clock.h"

void config_clock(void){
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
	//bật clock ngoại 8Mhz
	RCC->CR |= RCC_CR_HSEON;
 8000bf0:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <config_clock+0x88>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a1f      	ldr	r2, [pc, #124]	; (8000c74 <config_clock+0x88>)
 8000bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bfa:	6013      	str	r3, [r2, #0]
	//đợi cho clock ngoại bật xong
	while(!(RCC->CR & RCC_CR_HSERDY) );
 8000bfc:	bf00      	nop
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <config_clock+0x88>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d0f9      	beq.n	8000bfe <config_clock+0x12>
	//chọn clock chính là clock ngoại hse
	RCC->CFGR |= RCC_CFGR_SW_HSE;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <config_clock+0x88>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <config_clock+0x88>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6053      	str	r3, [r2, #4]
	//đợi chọn clock chính là clock ngoại hse xong
	while(!(RCC->CFGR & RCC_CFGR_SWS_HSE));
 8000c16:	bf00      	nop
 8000c18:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <config_clock+0x88>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d0f9      	beq.n	8000c18 <config_clock+0x2c>
	//cấu hình các bộ chia clock
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <config_clock+0x88>)
 8000c26:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <config_clock+0x88>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	6053      	str	r3, [r2, #4]
	RCC->CFGR|= RCC_CFGR_PPRE2_DIV1;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <config_clock+0x88>)
 8000c2e:	4a11      	ldr	r2, [pc, #68]	; (8000c74 <config_clock+0x88>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	6053      	str	r3, [r2, #4]
	//bật clock cho,Timer1 clock về apb2 là 8Mhz
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <config_clock+0x88>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <config_clock+0x88>)
 8000c3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c3e:	6193      	str	r3, [r2, #24]
	//cấu hình max thanh ghi đếm của timer
	TIM1->ARR =0xffff-1;
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <config_clock+0x8c>)
 8000c42:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c46:	62da      	str	r2, [r3, #44]	; 0x2c
	//bộ chia của timer1 là 8: clock của timer1 là 8Mhz/8=1Mhz
	TIM1->PSC =8-1;
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <config_clock+0x8c>)
 8000c4a:	2207      	movs	r2, #7
 8000c4c:	629a      	str	r2, [r3, #40]	; 0x28
	//Bật timer1
	TIM1->CR1 |=TIM_CR1_CEN;
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <config_clock+0x8c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a09      	ldr	r2, [pc, #36]	; (8000c78 <config_clock+0x8c>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6013      	str	r3, [r2, #0]
	//Đợi timer1 bật xong
	while(! (TIM1->SR & TIM_SR_UIF ));
 8000c5a:	bf00      	nop
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <config_clock+0x8c>)
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d0f9      	beq.n	8000c5c <config_clock+0x70>



}
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40012c00 	.word	0x40012c00

08000c7c <delay_us>:
void delay_us(uint16_t us ){
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	80fb      	strh	r3, [r7, #6]
	TIM1->CNT=0;
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <delay_us+0x28>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM1->CNT <us);
 8000c8c:	bf00      	nop
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <delay_us+0x28>)
 8000c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d3fa      	bcc.n	8000c8e <delay_us+0x12>

}
 8000c98:	bf00      	nop
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	40012c00 	.word	0x40012c00

08000ca8 <delay_ms>:
void delay_ms(uint16_t ms){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	80fb      	strh	r3, [r7, #6]

	for (uint16_t i=0; i<ms ;i++){
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	81fb      	strh	r3, [r7, #14]
 8000cb6:	e006      	b.n	8000cc6 <delay_ms+0x1e>
		delay_us(1000);
 8000cb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cbc:	f7ff ffde 	bl	8000c7c <delay_us>
	for (uint16_t i=0; i<ms ;i++){
 8000cc0:	89fb      	ldrh	r3, [r7, #14]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	81fb      	strh	r3, [r7, #14]
 8000cc6:	89fa      	ldrh	r2, [r7, #14]
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d3f4      	bcc.n	8000cb8 <delay_ms+0x10>
	}
}
 8000cce:	bf00      	nop
 8000cd0:	bf00      	nop
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <systick_interrupt_time_usart>:
 * 2 - mode ( 1 : systick interrupt time ; 0 : char terminator )
 * 3 - char terminator
 * 4 - time
 * 5 - temp cnt time
 */
void systick_interrupt_time_usart(uint16_t usart_manager[]){
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	if(usart_manager[5]==0){
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	330a      	adds	r3, #10
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d10d      	bne.n	8000d06 <systick_interrupt_time_usart+0x2e>
		usart_manager[1]=1;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3302      	adds	r3, #2
 8000cee:	2201      	movs	r2, #1
 8000cf0:	801a      	strh	r2, [r3, #0]
		usart_manager[0]=0;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	801a      	strh	r2, [r3, #0]
		//TẮT NGẮT SYSTICK
		SysTick->CTRL &=~ SysTick_CTRL_TICKINT_Msk;
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <systick_interrupt_time_usart+0x44>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <systick_interrupt_time_usart+0x44>)
 8000cfe:	f023 0302 	bic.w	r3, r3, #2
 8000d02:	6013      	str	r3, [r2, #0]
	}
	else{
		usart_manager[5]--;
	}
}
 8000d04:	e005      	b.n	8000d12 <systick_interrupt_time_usart+0x3a>
		usart_manager[5]--;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	330a      	adds	r3, #10
 8000d0a:	881a      	ldrh	r2, [r3, #0]
 8000d0c:	3a01      	subs	r2, #1
 8000d0e:	b292      	uxth	r2, r2
 8000d10:	801a      	strh	r2, [r3, #0]
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e010 	.word	0xe000e010

08000d20 <init_usart>:
 */

#include "usart.h"
#include "gpio.h"

void init_usart(uint8_t usart_x,uint16_t baudrate){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	460a      	mov	r2, r1
 8000d2a:	71fb      	strb	r3, [r7, #7]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	80bb      	strh	r3, [r7, #4]
*--------------------------------------------------------
* USART2 -> PA2 (Tx) and PA3(Rx)
* USART1 -> PA9 (Tx) and PA10(Rx)
*/
	// bật afio để cho phép chức năng thay thế trên pin
	RCC->APB2ENR |= 1;
 8000d30:	4b31      	ldr	r3, [pc, #196]	; (8000df8 <init_usart+0xd8>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a30      	ldr	r2, [pc, #192]	; (8000df8 <init_usart+0xd8>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6193      	str	r3, [r2, #24]

	unsigned long BRR_Cal;
	BRR_Cal = usartdiv_baudrate(baudrate);
 8000d3c:	88bb      	ldrh	r3, [r7, #4]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f862 	bl	8000e08 <usartdiv_baudrate>
 8000d44:	60f8      	str	r0, [r7, #12]

	if(usart_x == 1)
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d127      	bne.n	8000d9c <init_usart+0x7c>
	{
	//cấp clock cho usart
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000d4c:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <init_usart+0xd8>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a29      	ldr	r2, [pc, #164]	; (8000df8 <init_usart+0xd8>)
 8000d52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d56:	6193      	str	r3, [r2, #24]
	init_GP(PA,9,OUT50,O_AF_PP);
 8000d58:	2302      	movs	r3, #2
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	2109      	movs	r1, #9
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f7ff fe7c 	bl	8000a5c <init_GP>
	init_GP(PA,10,IN,I_PP);
 8000d64:	2302      	movs	r3, #2
 8000d66:	2200      	movs	r2, #0
 8000d68:	210a      	movs	r1, #10
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f7ff fe76 	bl	8000a5c <init_GP>
	// cài đặt baudrate cho thanh ghi
	USART1->BRR = BRR_Cal;
 8000d70:	4a22      	ldr	r2, [pc, #136]	; (8000dfc <init_usart+0xdc>)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	6093      	str	r3, [r2, #8]
	// bật chân transmit
	USART1->CR1 |= USART_CR1_TE;
 8000d76:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <init_usart+0xdc>)
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	4a20      	ldr	r2, [pc, #128]	; (8000dfc <init_usart+0xdc>)
 8000d7c:	f043 0308 	orr.w	r3, r3, #8
 8000d80:	60d3      	str	r3, [r2, #12]
	// bật chân recive
	USART1->CR1 |= USART_CR1_RE;
 8000d82:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <init_usart+0xdc>)
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	4a1d      	ldr	r2, [pc, #116]	; (8000dfc <init_usart+0xdc>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	60d3      	str	r3, [r2, #12]
	// bật Uart
	USART1->CR1 |= USART_CR1_UE;
 8000d8e:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <init_usart+0xdc>)
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	4a1a      	ldr	r2, [pc, #104]	; (8000dfc <init_usart+0xdc>)
 8000d94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d98:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RE;
	// bật Uart
	USART2->CR1 |= USART_CR1_UE;
	}

}
 8000d9a:	e029      	b.n	8000df0 <init_usart+0xd0>
	else if (usart_x == 2)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d126      	bne.n	8000df0 <init_usart+0xd0>
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <init_usart+0xd8>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <init_usart+0xd8>)
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dac:	61d3      	str	r3, [r2, #28]
	init_GP(PA,2,OUT50,O_AF_PP);
 8000dae:	2302      	movs	r3, #2
 8000db0:	2203      	movs	r2, #3
 8000db2:	2102      	movs	r1, #2
 8000db4:	2001      	movs	r0, #1
 8000db6:	f7ff fe51 	bl	8000a5c <init_GP>
	init_GP(PA,3,IN,I_PP);
 8000dba:	2302      	movs	r3, #2
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2103      	movs	r1, #3
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f7ff fe4b 	bl	8000a5c <init_GP>
	USART2->BRR = BRR_Cal;
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <init_usart+0xe0>)
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	6093      	str	r3, [r2, #8]
	USART2->CR1 |= USART_CR1_TE;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <init_usart+0xe0>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <init_usart+0xe0>)
 8000dd2:	f043 0308 	orr.w	r3, r3, #8
 8000dd6:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RE;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <init_usart+0xe0>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <init_usart+0xe0>)
 8000dde:	f043 0304 	orr.w	r3, r3, #4
 8000de2:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_UE;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <init_usart+0xe0>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <init_usart+0xe0>)
 8000dea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40013800 	.word	0x40013800
 8000e00:	40004400 	.word	0x40004400
 8000e04:	00000000 	.word	0x00000000

08000e08 <usartdiv_baudrate>:

uint32_t usartdiv_baudrate(uint32_t baudrate){
 8000e08:	b5b0      	push	{r4, r5, r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]

unsigned long div = 8000000UL;
 8000e10:	4b3b      	ldr	r3, [pc, #236]	; (8000f00 <usartdiv_baudrate+0xf8>)
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
unsigned long dec;
unsigned long final;
double frac = 8000000.00;
 8000e14:	a338      	add	r3, pc, #224	; (adr r3, 8000ef8 <usartdiv_baudrate+0xf0>)
 8000e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1a:	e9c7 2306 	strd	r2, r3, [r7, #24]
double frac2 = 1.00;
 8000e1e:	f04f 0200 	mov.w	r2, #0
 8000e22:	4b38      	ldr	r3, [pc, #224]	; (8000f04 <usartdiv_baudrate+0xfc>)
 8000e24:	e9c7 2304 	strd	r2, r3, [r7, #16]
div = div / (baudrate*16);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
frac = 16*((frac / (baudrate*16))-div);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	011b      	lsls	r3, r3, #4
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fadb 	bl	80003f4 <__aeabi_ui2d>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000e46:	f7ff fc79 	bl	800073c <__aeabi_ddiv>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	4614      	mov	r4, r2
 8000e50:	461d      	mov	r5, r3
 8000e52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e54:	f7ff face 	bl	80003f4 <__aeabi_ui2d>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	4629      	mov	r1, r5
 8000e60:	f7ff f98a 	bl	8000178 <__aeabi_dsub>
 8000e64:	4602      	mov	r2, r0
 8000e66:	460b      	mov	r3, r1
 8000e68:	4610      	mov	r0, r2
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f04f 0200 	mov.w	r2, #0
 8000e70:	4b25      	ldr	r3, [pc, #148]	; (8000f08 <usartdiv_baudrate+0x100>)
 8000e72:	f7ff fb39 	bl	80004e8 <__aeabi_dmul>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	e9c7 2306 	strd	r2, r3, [r7, #24]
dec = frac;
 8000e7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000e82:	f7ff fdcb 	bl	8000a1c <__aeabi_d2uiz>
 8000e86:	4603      	mov	r3, r0
 8000e88:	623b      	str	r3, [r7, #32]
frac2 = 100*(frac-dec);
 8000e8a:	6a38      	ldr	r0, [r7, #32]
 8000e8c:	f7ff fab2 	bl	80003f4 <__aeabi_ui2d>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000e98:	f7ff f96e 	bl	8000178 <__aeabi_dsub>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <usartdiv_baudrate+0x104>)
 8000eaa:	f7ff fb1d 	bl	80004e8 <__aeabi_dmul>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	e9c7 2304 	strd	r2, r3, [r7, #16]
if(frac2>50)
 8000eb6:	f04f 0200 	mov.w	r2, #0
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <usartdiv_baudrate+0x108>)
 8000ebc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000ec0:	f7ff fda2 	bl	8000a08 <__aeabi_dcmpgt>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d00a      	beq.n	8000ee0 <usartdiv_baudrate+0xd8>
{
	dec ++;
 8000eca:	6a3b      	ldr	r3, [r7, #32]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	623b      	str	r3, [r7, #32]
	if(dec == 16)
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
 8000ed2:	2b10      	cmp	r3, #16
 8000ed4:	d104      	bne.n	8000ee0 <usartdiv_baudrate+0xd8>
	{
		dec = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	623b      	str	r3, [r7, #32]
		div ++;
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	3301      	adds	r3, #1
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
	}
}
final = (div<<4);
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee2:	011b      	lsls	r3, r3, #4
 8000ee4:	60fb      	str	r3, [r7, #12]
final += dec;
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	6a3b      	ldr	r3, [r7, #32]
 8000eea:	4413      	add	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
return final;
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3728      	adds	r7, #40	; 0x28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ef8:	00000000 	.word	0x00000000
 8000efc:	415e8480 	.word	0x415e8480
 8000f00:	007a1200 	.word	0x007a1200
 8000f04:	3ff00000 	.word	0x3ff00000
 8000f08:	40300000 	.word	0x40300000
 8000f0c:	40590000 	.word	0x40590000
 8000f10:	40490000 	.word	0x40490000

08000f14 <usart_send_char>:

void usart_send_char(uint8_t a){
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
	if(RCC->APB2ENR & RCC_APB2ENR_USART1EN){
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <usart_send_char+0x4c>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00a      	beq.n	8000f40 <usart_send_char+0x2c>
		while( !(USART1->SR & USART_SR_TC ));
 8000f2a:	bf00      	nop
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <usart_send_char+0x50>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d0f9      	beq.n	8000f2c <usart_send_char+0x18>
			USART1->DR=a;
 8000f38:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <usart_send_char+0x50>)
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	6053      	str	r3, [r2, #4]
	}
	else{
		while( !(USART2->SR & USART_SR_TC ));
			USART2->DR=a;
	}
}
 8000f3e:	e009      	b.n	8000f54 <usart_send_char+0x40>
		while( !(USART2->SR & USART_SR_TC ));
 8000f40:	bf00      	nop
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <usart_send_char+0x54>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0f9      	beq.n	8000f42 <usart_send_char+0x2e>
			USART2->DR=a;
 8000f4e:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <usart_send_char+0x54>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	6053      	str	r3, [r2, #4]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40013800 	.word	0x40013800
 8000f68:	40004400 	.word	0x40004400

08000f6c <usart_get_char>:

uint8_t usart_get_char(){
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
	uint8_t a;
	if(RCC->APB2ENR & RCC_APB2ENR_USART1EN){
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <usart_get_char+0x48>)
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d00a      	beq.n	8000f94 <usart_get_char+0x28>
			while( !(USART1->SR & USART_SR_RXNE ));
 8000f7e:	bf00      	nop
 8000f80:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <usart_get_char+0x4c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0320 	and.w	r3, r3, #32
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d0f9      	beq.n	8000f80 <usart_get_char+0x14>
			a=USART1->DR;
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <usart_get_char+0x4c>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	e009      	b.n	8000fa8 <usart_get_char+0x3c>
		}
		else{
			while( !(USART2->SR & USART_SR_RXNE ));
 8000f94:	bf00      	nop
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <usart_get_char+0x50>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0320 	and.w	r3, r3, #32
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0f9      	beq.n	8000f96 <usart_get_char+0x2a>
			a=USART2->DR;
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <usart_get_char+0x50>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	71fb      	strb	r3, [r7, #7]
		}
	return a;
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40013800 	.word	0x40013800
 8000fbc:	40004400 	.word	0x40004400

08000fc0 <usart_send_string>:

void usart_send_string(uint8_t *string){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]


	while(*string){
 8000fc8:	e006      	b.n	8000fd8 <usart_send_string+0x18>
		usart_send_char(*string++);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	1c5a      	adds	r2, r3, #1
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff9e 	bl	8000f14 <usart_send_char>
	while(*string){
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f4      	bne.n	8000fca <usart_send_string+0xa>

	}

}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	db0b      	blt.n	8001016 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	f003 021f 	and.w	r2, r3, #31
 8001004:	4906      	ldr	r1, [pc, #24]	; (8001020 <__NVIC_EnableIRQ+0x34>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	095b      	lsrs	r3, r3, #5
 800100c:	2001      	movs	r0, #1
 800100e:	fa00 f202 	lsl.w	r2, r0, r2
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100

08001024 <init_usart_rx_interrupt>:
 *      Author: ad
 */
#include"usart_rx_interrupt.h"
#include "systick_interrupt.h"

void init_usart_rx_interrupt(uint8_t usart_x){
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
// clock phải được cấu hình 8Mhz, thông qua config_clock()
//--------------------------------------------------------
// USART2 -> PA2 (Tx) and PA3(Rx)
// USART1 -> PA9 (Tx) and PA10(Rx)

	if(usart_x == 1)
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d10c      	bne.n	800104e <init_usart_rx_interrupt+0x2a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001034:	b672      	cpsid	i
}
 8001036:	bf00      	nop
	{
		__disable_irq();
		USART1->CR1 |= USART_CR1_RXNEIE;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <init_usart_rx_interrupt+0x54>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <init_usart_rx_interrupt+0x54>)
 800103e:	f043 0320 	orr.w	r3, r3, #32
 8001042:	60d3      	str	r3, [r2, #12]
		NVIC_EnableIRQ(USART1_IRQn);
 8001044:	2025      	movs	r0, #37	; 0x25
 8001046:	f7ff ffd1 	bl	8000fec <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800104a:	b662      	cpsie	i
}
 800104c:	e00f      	b.n	800106e <init_usart_rx_interrupt+0x4a>
		__enable_irq();
	}
	else if (usart_x == 2)
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d10c      	bne.n	800106e <init_usart_rx_interrupt+0x4a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001054:	b672      	cpsid	i
}
 8001056:	bf00      	nop
	{
		__disable_irq();
		USART2->CR1 |= USART_CR1_RXNEIE;
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <init_usart_rx_interrupt+0x58>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	4a07      	ldr	r2, [pc, #28]	; (800107c <init_usart_rx_interrupt+0x58>)
 800105e:	f043 0320 	orr.w	r3, r3, #32
 8001062:	60d3      	str	r3, [r2, #12]
		NVIC_EnableIRQ(USART2_IRQn);
 8001064:	2026      	movs	r0, #38	; 0x26
 8001066:	f7ff ffc1 	bl	8000fec <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800106a:	b662      	cpsie	i
}
 800106c:	bf00      	nop
		__enable_irq();
	}

}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40013800 	.word	0x40013800
 800107c:	40004400 	.word	0x40004400

08001080 <usart_get_string_isr>:
 * 3 - char terminator
 * 4 - time
 * 5 - temp cnt time
 */
void usart_get_string_isr(uint16_t usart_manager[], uint8_t usart_data[])
{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
//đặt trong hàm ngắt của usart tương ứng
//ex : void USART1_IRQHandler()

usart_data[usart_manager[0]] = usart_get_char();
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	189c      	adds	r4, r3, r2
 8001094:	f7ff ff6a 	bl	8000f6c <usart_get_char>
 8001098:	4603      	mov	r3, r0
 800109a:	7023      	strb	r3, [r4, #0]
if(usart_manager[2]==0){
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3304      	adds	r3, #4
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d121      	bne.n	80010ea <usart_get_string_isr+0x6a>
	if(usart_data[usart_manager[0]] == usart_manager[3])
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3306      	adds	r3, #6
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d10e      	bne.n	80010dc <usart_get_string_isr+0x5c>
	{
		usart_data[usart_manager[0]]='\0';
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
		usart_manager[0] = 0;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	801a      	strh	r2, [r3, #0]
		usart_manager[1] = 1;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3302      	adds	r3, #2
 80010d6:	2201      	movs	r2, #1
 80010d8:	801a      	strh	r2, [r3, #0]
	//BẬT THANH GHI
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
	__enable_irq();
}

}
 80010da:	e031      	b.n	8001140 <usart_get_string_isr+0xc0>
		usart_manager[0]++;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	3301      	adds	r3, #1
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	801a      	strh	r2, [r3, #0]
}
 80010e8:	e02a      	b.n	8001140 <usart_get_string_isr+0xc0>
	usart_manager[0]++;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	801a      	strh	r2, [r3, #0]
	usart_manager[5]=usart_manager[4];
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	330a      	adds	r3, #10
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	8912      	ldrh	r2, [r2, #8]
 80010fe:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001100:	b672      	cpsid	i
}
 8001102:	bf00      	nop
	SysTick->CTRL = 0;
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <usart_get_string_isr+0xc8>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
	SysTick->LOAD= 8000-1;
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <usart_get_string_isr+0xc8>)
 800110c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001110:	605a      	str	r2, [r3, #4]
	SysTick->VAL=0;
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <usart_get_string_isr+0xc8>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <usart_get_string_isr+0xc8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <usart_get_string_isr+0xc8>)
 800111e:	f043 0304 	orr.w	r3, r3, #4
 8001122:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <usart_get_string_isr+0xc8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a07      	ldr	r2, [pc, #28]	; (8001148 <usart_get_string_isr+0xc8>)
 800112a:	f043 0302 	orr.w	r3, r3, #2
 800112e:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <usart_get_string_isr+0xc8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a04      	ldr	r2, [pc, #16]	; (8001148 <usart_get_string_isr+0xc8>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800113c:	b662      	cpsie	i
}
 800113e:	bf00      	nop
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	bd90      	pop	{r4, r7, pc}
 8001148:	e000e010 	.word	0xe000e010

0800114c <main>:

uint16_t usart_manager[]={0,0,1,'z',5000};
uint8_t usart_data[255]="";

int main(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	//cấu hình clock ngoại 8Mhz, bộ chia của các bus cấu hình bằng 1
	//bắt buộc phải config_clock();
	//---------------------------------------xxx-------------------------------------------------------
	config_clock();
 8001150:	f7ff fd4c 	bl	8000bec <config_clock>
	//---------------------------------------xxx-------------------------------------------------------
	init_GP(PC,13,OUT50,O_GP_PP);
 8001154:	2300      	movs	r3, #0
 8001156:	2203      	movs	r2, #3
 8001158:	210d      	movs	r1, #13
 800115a:	2003      	movs	r0, #3
 800115c:	f7ff fc7e 	bl	8000a5c <init_GP>
	W_GP(PC, 13,HIGH);
 8001160:	2201      	movs	r2, #1
 8001162:	210d      	movs	r1, #13
 8001164:	2003      	movs	r0, #3
 8001166:	f7ff fce9 	bl	8000b3c <W_GP>
//	init_GP(PA,0,IN,I_PP);
//	init_interrupt_PA0();
//	init_systick_delay();
//	init_systick_interrupt(1000);
	init_usart(1, 9600);
 800116a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800116e:	2001      	movs	r0, #1
 8001170:	f7ff fdd6 	bl	8000d20 <init_usart>
	init_usart_rx_interrupt(1);
 8001174:	2001      	movs	r0, #1
 8001176:	f7ff ff55 	bl	8001024 <init_usart_rx_interrupt>



	while(1){

		if(usart_manager[1]==1){
 800117a:	4b05      	ldr	r3, [pc, #20]	; (8001190 <main+0x44>)
 800117c:	885b      	ldrh	r3, [r3, #2]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d1fb      	bne.n	800117a <main+0x2e>

			usart_send_string(usart_data);
 8001182:	4804      	ldr	r0, [pc, #16]	; (8001194 <main+0x48>)
 8001184:	f7ff ff1c 	bl	8000fc0 <usart_send_string>
			usart_manager[1]=0;
 8001188:	4b01      	ldr	r3, [pc, #4]	; (8001190 <main+0x44>)
 800118a:	2200      	movs	r2, #0
 800118c:	805a      	strh	r2, [r3, #2]
		if(usart_manager[1]==1){
 800118e:	e7f4      	b.n	800117a <main+0x2e>
 8001190:	20000000 	.word	0x20000000
 8001194:	20000028 	.word	0x20000028

08001198 <USART1_IRQHandler>:

	}
}


void USART1_IRQHandler(){
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	 usart_get_string_isr(usart_manager,usart_data);
 800119c:	4902      	ldr	r1, [pc, #8]	; (80011a8 <USART1_IRQHandler+0x10>)
 800119e:	4803      	ldr	r0, [pc, #12]	; (80011ac <USART1_IRQHandler+0x14>)
 80011a0:	f7ff ff6e 	bl	8001080 <usart_get_string_isr>
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000028 	.word	0x20000028
 80011ac:	20000000 	.word	0x20000000

080011b0 <SysTick_Handler>:
void SysTick_Handler(){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	systick_interrupt_time_usart(usart_manager);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <SysTick_Handler+0x10>)
 80011b6:	f7ff fd8f 	bl	8000cd8 <systick_interrupt_time_usart>
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000000 	.word	0x20000000

080011c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011c4:	480d      	ldr	r0, [pc, #52]	; (80011fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <LoopForever+0x6>)
  ldr r1, =_edata
 80011ce:	490d      	ldr	r1, [pc, #52]	; (8001204 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011d0:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <LoopForever+0xe>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <LoopForever+0x12>)
  ldr r4, =_ebss
 80011e4:	4c0a      	ldr	r4, [pc, #40]	; (8001210 <LoopForever+0x16>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011f2:	f000 f811 	bl	8001218 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011f6:	f7ff ffa9 	bl	800114c <main>

080011fa <LoopForever>:

LoopForever:
    b LoopForever
 80011fa:	e7fe      	b.n	80011fa <LoopForever>
  ldr   r0, =_estack
 80011fc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001204:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001208:	08001280 	.word	0x08001280
  ldr r2, =_sbss
 800120c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001210:	20000128 	.word	0x20000128

08001214 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001214:	e7fe      	b.n	8001214 <ADC1_2_IRQHandler>
	...

08001218 <__libc_init_array>:
 8001218:	b570      	push	{r4, r5, r6, lr}
 800121a:	2600      	movs	r6, #0
 800121c:	4d0c      	ldr	r5, [pc, #48]	; (8001250 <__libc_init_array+0x38>)
 800121e:	4c0d      	ldr	r4, [pc, #52]	; (8001254 <__libc_init_array+0x3c>)
 8001220:	1b64      	subs	r4, r4, r5
 8001222:	10a4      	asrs	r4, r4, #2
 8001224:	42a6      	cmp	r6, r4
 8001226:	d109      	bne.n	800123c <__libc_init_array+0x24>
 8001228:	f000 f81a 	bl	8001260 <_init>
 800122c:	2600      	movs	r6, #0
 800122e:	4d0a      	ldr	r5, [pc, #40]	; (8001258 <__libc_init_array+0x40>)
 8001230:	4c0a      	ldr	r4, [pc, #40]	; (800125c <__libc_init_array+0x44>)
 8001232:	1b64      	subs	r4, r4, r5
 8001234:	10a4      	asrs	r4, r4, #2
 8001236:	42a6      	cmp	r6, r4
 8001238:	d105      	bne.n	8001246 <__libc_init_array+0x2e>
 800123a:	bd70      	pop	{r4, r5, r6, pc}
 800123c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001240:	4798      	blx	r3
 8001242:	3601      	adds	r6, #1
 8001244:	e7ee      	b.n	8001224 <__libc_init_array+0xc>
 8001246:	f855 3b04 	ldr.w	r3, [r5], #4
 800124a:	4798      	blx	r3
 800124c:	3601      	adds	r6, #1
 800124e:	e7f2      	b.n	8001236 <__libc_init_array+0x1e>
 8001250:	08001278 	.word	0x08001278
 8001254:	08001278 	.word	0x08001278
 8001258:	08001278 	.word	0x08001278
 800125c:	0800127c 	.word	0x0800127c

08001260 <_init>:
 8001260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001262:	bf00      	nop
 8001264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001266:	bc08      	pop	{r3}
 8001268:	469e      	mov	lr, r3
 800126a:	4770      	bx	lr

0800126c <_fini>:
 800126c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800126e:	bf00      	nop
 8001270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001272:	bc08      	pop	{r3}
 8001274:	469e      	mov	lr, r3
 8001276:	4770      	bx	lr
